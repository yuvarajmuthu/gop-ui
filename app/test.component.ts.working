import {Component, ElementRef, AfterViewInit} from '@angular/core';
import * as d3 from 'd3';

@Component({
  selector: 'test-Comp',
  template: ''
})

export class TestComponent implements AfterViewInit{
  public height:any = 460;
  public width:any = 720;
  public svg:any;
  public diagonal:any;
  public tree:any;
  public root:any;
  public i:number = 0;
  public graph:any;
  public elementRef: ElementRef;

  constructor(elementRef: ElementRef) {
   this.elementRef = elementRef;
  }

  ngAfterViewInit(){
    console.log("afterViewInit() called");
    this.graph = d3.select(this.elementRef.nativeElement); 

    this.diagonal = d3.svg.diagonal()
                       .projection(function(d) { return [d.y, d.x]; });

    // load the external data
    d3.json('app/treeData.json', function(error, treeData){
      console.log('ProcessTree Callback');
      console.log(treeData[0]);
      console.log(this);
      this.update22(treeData[0]);
    }.bind(this)) //binding the parent object
  }

//myCallback = () => alert("done");

  public update22 = function update2(source:any) {
      console.log('update22');
      console.log(source);

      this.tree = d3.layout.tree().size([this.height, this.width]);
      console.log('this.height-' + this.height);
    // Compute the new tree layout.
      var nodes = this.tree.nodes(source).reverse(),
      links = this.tree.links(nodes);

    // Normalize for fixed-depth.
    nodes.forEach(function(d) { d.y = d.depth * 180; });

    console.log(this.graph);

    this.svg = this.graph.append("svg")
      .attr("width", this.width)
      .attr("height", this.height)
        .append("g")
      .attr("transform", "translate(" + 120 + "," + 20 + ")");

      // Declare the nodes…
    var node = this.svg.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++this.i); });

    // Enter the nodes.
    var nodeEnter = node.enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { 
        return "translate(" + d.y + "," + d.x + ")"; });

    nodeEnter.append("circle")
      .attr("r", 10)
      .style("fill", "#fff");

    nodeEnter.append("text")
      .attr("x", function(d) { 
        return d.children || d._children ? -13 : 13; })
      .attr("dy", ".35em")
      .attr("text-anchor", function(d) { 
        return d.children || d._children ? "end" : "start"; })
      .text(function(d) { return d.name; })
      .style("fill-opacity", 1);

    // Declare the links…
    var link = this.svg.selectAll("path.link")
      .data(links, function(d) { return d.target.id; });

    // Enter the links.
    link.enter().insert("path", "g")
      .attr("class", "link")
      .attr("d", this.diagonal);
    
  }
}
